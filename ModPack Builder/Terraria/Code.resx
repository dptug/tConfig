<?xml version="1.0" encoding="utf-8"?>
<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
<resheader name="resmimetype"><value>text/microsoft-resx</value></resheader><resheader name="version"><value>1.3</value></resheader><resheader name="reader"><value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value></resheader><resheader name="writer"><value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value></resheader><data name="Extractor"><value>using System;
using System.Text;
using System.Security.Cryptography;
using System.Diagnostics;
using System.IO;
using System.Resources;
using System.Reflection;
using Microsoft.Win32;
using System.Collections;
using System.Globalization;

namespace Package_Tool
{
    class Extractor
    {
        static void Main(string[] args)
        {
            string exeName = "tConfig.exe"; //"Terraria.exe";
            string steamPath = "";
            try
            {
                //RegistryKey regKey = Registry.LocalMachine.OpenSubKey("SOFTWARE").OpenSubKey("Valve").OpenSubKey("Steam");
                //steamPath = (string)regKey.GetValue("InstallPath");
                RegistryKey regKey = Registry.CurrentUser.OpenSubKey("SOFTWARE").OpenSubKey("Valve").OpenSubKey("Steam");
                steamPath = (string)regKey.GetValue("SteamPath");
            }
            catch (Exception e)
            {
                Console.WriteLine("Error accessing registry: " + e);
                //Console.WriteLine("Cannot proceed. Press Enter to exit.");
                //Console.ReadLine();
                //return;
                //Console.WriteLine("Will proceed with current directory used instead.");
            }
            string folder = "";
            if (steamPath != "") folder = steamPath + @"\steamapps\common\terraria\";

            if (!File.Exists(folder + exeName))
            {
                //Try installing the game launcher?
                Console.WriteLine("Warning: "+folder + exeName + " could not be found.\nYou will need to install tConfig in order to use this mod.");
                Console.WriteLine("Press Enter to continue.");
                Console.ReadLine();
            }

            string SavePath = string.Concat(new object[]
		    {
				AppDomain.CurrentDomain.BaseDirectory,
				Path.DirectorySeparatorChar,
				"Storage",
				Path.DirectorySeparatorChar,
				"ModPacks"
		    });
            if (!Directory.Exists(SavePath)) Directory.CreateDirectory(SavePath);
            Assembly assembly = Assembly.GetExecutingAssembly();
            //Stream nameStream = assembly.GetManifestResourceStream("Filename");
            Stream fileStream = assembly.GetManifestResourceStream("ModFiles");
            //ResourceSet nameSet = Filenames.ResourceManager.GetResourceSet(CultureInfo.CurrentUICulture, true, true);
            //ResourceSet fileSet = Resources.ResourceManager.GetResourceSet(CultureInfo.CurrentUICulture, true, true);
            //IResourceReader nameReader = new ResourceReader(nameStream);
            IResourceReader fileReader = new ResourceReader(fileStream);
            foreach (DictionaryEntry entry in fileReader)
            {
                string name = (string)entry.Key;
                byte[] file = (byte[])entry.Value;
                Console.WriteLine("Writing out " + SavePath + Path.DirectorySeparatorChar + name);
                File.WriteAllBytes(SavePath + Path.DirectorySeparatorChar + name, file);//(byte[])fileSet.GetObject(resourceKey));
            }
            Console.WriteLine("Done installing!\n\nDon't forget to Enable the mods in the tConfig Settings menu!\n\nPress Enter to exit!");
            Console.ReadLine();
        }
    }
}
</value></data>
  </root>